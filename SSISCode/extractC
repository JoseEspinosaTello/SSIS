#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.IO.Compression;
using System.Linq;
#endregion

namespace ST_a4544aafb8ca4128803f65a8f58cd0e1
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            String zipPath = Dts.Variables["FilePath"].Value.ToString();
            String zipFilter = Dts.Variables["ZipFilter"].Value.ToString();
            String extractPath = Dts.Variables["ExtractPath"].Value.ToString();
            String xlsxFilter = Dts.Variables["XLSXFilter"].Value.ToString();


            String[] xlsxFiles;
            String newestFile;
            Boolean filesFound = false;
            int timeOutValue = 1;

            DateTime fileChangeDt;
            DateTime startTime = DateTime.Now;
            TimeSpan fileAge;
            TimeSpan newestAge = new TimeSpan(3, 0, 0, 0);  
           

            
           

            try
            {
                do
                {
                    //Start 1 min timer
                    if (startTime.AddMinutes(timeOutValue) < DateTime.Now)
                    {
                        throw new Exception("no file fitting the time criteria were found. Package timeout limit has been exceeded.");
                    }   
                        // find the newest .zip file in the directory/folder.
                        newestFile = Directory.GetFiles(zipPath, zipFilter).OrderByDescending(File.GetLastWriteTime).First();
                        
                        //instantiate writetime of newest file to variables.
                        fileChangeDt = File.GetLastWriteTime(newestFile);
                        fileAge = DateTime.Now.Subtract(fileChangeDt);

                    //instantiate xlsxFiles array with the extract path .xlsx files.
                    xlsxFiles = Directory.GetFiles(extractPath, xlsxFilter);
                    
                    //compare the newest file age with the desired search file age.
                    //If newest file meets the criteria the we will extract.
                    if (fileAge < newestAge)
                    {
                        //ZipFile.ExtractToDirectory cannot overwite any existing files.
                        //foreach loop will look through the extract path and delte any existing .xlsx files.
                        foreach (var item in xlsxFiles)
                        {
                            File.Delete(item.ToString());
                        }


                        //extract the newest file to the extractPath directory/folder
                        ZipFile.ExtractToDirectory(newestFile, extractPath);

                        //set filesFound to true; this will end the Do While loop.
                        filesFound = true;

                    }
                    //if no files match criteris the program will delay for 1 min.
                    //this will allow the startTime timer to fail and catch the error.
                    if (filesFound != true)
                    {
                        System.Threading.Thread.Sleep(60000);
                    }
                }

                // If true this will end the Do While loop.
                while (filesFound == false);


            }


            catch (Exception ex)
            {
                Dts.Events.FireError(-1, "", "Error searching for newest file - " + ex.Message, "", 0);
            }


            Dts.TaskResult = (int)ScriptResults.Success;

        }


           
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
